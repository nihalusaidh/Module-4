# Classes and Objects in Python: Calculate the Area of a Circle

## ðŸŽ¯ Aim
To write a Python program that calculates the **area of a circle** based on the radius provided by the user. This program uses a class named `cse` and a method `mech` to perform the calculation.

## ðŸ§  Algorithm
1. **Get user input**: Take the radius of the circle as input from the user.
2. **Define the class**: Create a class named `cse`.
3. **Define the method**: Inside the class, define the method `mech` to calculate the area of the circle using the formula:  
   Area = pi *r^2 
4. **Execute the program**: Create an object of the class and call the method with the radius value.

## ðŸ§¾ Program

r = float(input("Enter the radius of the circle: "))

class cse:

    def mech(self, r):
        area = 3.14159 * r * r
        print("Area of the circle:", area)

obj = cse()
obj.mech(r)




## Output
Enter the radius of the circle: 2.14
Area of the circle: 14.387225564000001

## Result
Thus Python program that calculates the **area of a circle** based on the radius provided by the user. This program uses a class named `cse` and a method `mech` to perform the calculation is executed successfully.

## Dictionary Operations in Python: Merging Two Dictionaries

## ðŸŽ¯ Aim
To write a Python program that merges **two dictionaries** and combines their key-value pairs.

## ðŸ§  Algorithm
1. Define two dictionaries `dict1` and `dict2` with some key-value pairs.
2. Define a function `merge()` that merges the two dictionaries using the `**` unpacking operator.
   - The merged result will combine keys from both dictionaries. If a key exists in both, the value from `dict2` will overwrite that from `dict1`.
3. Call the `merge()` function and print the merged dictionary.

## ðŸ§¾ Program
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 4, 'd': 5}

def merge(d1, d2):
    merged_dict = {**d1, **d2}  
    return merged_dict

result = merge(dict1, dict2)
print("Merged Dictionary:", result)

## Output
Merged Dictionary: {'a': 1, 'b': 4, 'c': 3, 'd': 5}

## Result
Thus the Python program that merges **two dictionaries** and combines their key-value pairs is executed successfully.

# ðŸ”¤ Dictionary-Python Program to Sort a Dictionary by Keys and Values
Aim
This Python program demonstrates how to sort a dictionary:
- Alphabetically by keys
- Alphabetically by values


## ðŸ§  Algorithm

1. **Start the program.**
2. **Define** a dictionary with key-value pairs.
3. **Sort by Keys**:
   - Use `sorted(dictionary.items())`
   - Convert the result to a dictionary using `dict()`
4. **Sort by Values**:
   - Use `sorted(dictionary.items(), key=lambda item: item[1])`
   - Convert the result to a dictionary using `dict()`
5. **Display** the original and sorted dictionaries.
6. **End the program.**

## ðŸ§ªProgram

data = {'b': 5, 'a': 2, 'd': 8, 'c': 3}


sorted_by_keys = dict(sorted(data.items()))

sorted_by_values = dict(sorted(data.items(), key=lambda item: item[1]))

print("Original Dictionary:", data)
print("Sorted by Keys:", sorted_by_keys)
print("Sorted by Values:", sorted_by_values)

## Sample Output
Original Dictionary: {'b': 5, 'a': 2, 'd': 8, 'c': 3}
Sorted by Keys: {'a': 2, 'b': 5, 'c': 3, 'd': 8}
Sorted by Values: {'a': 2, 'c': 3, 'b': 5, 'd': 8}

## Result
Thus the This Python program demonstrates how to sort a dictionary:
- Alphabetically by keys
- Alphabetically by values is executed successfully.

# Exception Handling in Python: Avoiding Index Errors

## ðŸŽ¯ Aim
To write a Python program that handles an **IndexError** when trying to access an element beyond the available range of a list.

## ðŸ§  Algorithm
1. Define a list `list1` with some integer elements.
2. Use a **try-except** block:
   - In the `try` block, attempt to access an index that is out of range (e.g., `list1[5]`).
   - In the `except` block, catch the error and print a custom message `"You're out of list range"`.
3. Print the result based on whether the index access succeeds or fails.

## ðŸ§¾ Program

list1 = [10, 20, 30, 40]

try:
    print("Accessing element:", list1[5])  
except IndexError:
    print("You're out of list range")

print("Program executed successfully.")

## Output
You're out of list range
Program executed successfully.
## Result
Thus the Python program that handles an **IndexError** when trying to access an element beyond the available range of a list is executed successfully.

# File Handling in Python: Count Lines Not Starting with 'T'

## ðŸŽ¯ Aim
To write a Python program that counts the number of lines in a text file `story.txt` that do **not** start with the alphabet `'T'`.

## ðŸ§  Algorithm
1. Open the file `story.txt` in **read mode**.
2. Initialize a counter `count` to zero.
3. Iterate through each line of the file:
   - Check if the first character of the line is **not** `'T'`.
   - If the line does not start with `'T'`, increment the `count` by 1.
4. After processing all lines, print the `count` value, which represents the number of lines that do not start with `'T'`.

## ðŸ§¾ Program
try:
    with open("story.txt", "r") as file:
        count = 0
        for line in file:
            if not line.startswith('T'):
                count += 1
        print("Number of lines not starting with 'T':", count)
except FileNotFoundError:
    print("Error: 'story.txt' file not found. Please check the file path.")

## Output
ERROR!
Error: 'story.txt' file not found. Please check the file path.

## Result
Thus the Python program that counts the number of lines in a text file `story.txt` that do **not** start with the alphabet `'T'` is executed successfully.





